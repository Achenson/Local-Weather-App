{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","latitude","setLatitude","longitude","setLongitude","region","setRegion","country","setCountry","weather","setWeather","sun","cloud","lightRain","heavyRain","bolt","snow","mist","weatherIcons","setWeatherIcons","temperature","setTemperature","feelsLike","setFeelsLike","tempUnit","setTempUnit","tempCelcius","setTempCelcius","tempCelciusFeelsLike","setTempCelciusFeelsLike","tempFahrenheit","Math","round","tempFahrenheitFeelsLike","changeTemperature","useEffect","Promise","resolve","reject","showPosition","position","resultObj","coords","navigator","geolocation","getCurrentPosition","console","log","then","result","myURL","fetch","res","json","data","JSON","stringify","name","sys","main","temp","feels_like","weatherIconsObj","style","textAlign","className","onClick","icon","faSun","size","display","faCloud","faCloudRain","faCloudShowersHeavy","faBolt","faSnowflake","faSmog","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.dfa748ac.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCloud } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudRain } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCloudShowersHeavy } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSnowflake } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSun } from \"@fortawesome/free-solid-svg-icons\";\nimport { faBolt } from \"@fortawesome/free-solid-svg-icons\";\nimport { faSmog } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction App() {\n  const [latitude, setLatitude] = useState(\"waiting for server response...\");\n  const [longitude, setLongitude] = useState(\"waiting for server response...\");\n\n  const [region, setRegion] = useState(\"waiting for server response...\");\n  const [country, setCountry] = useState(\"waiting for server response...\");\n  const [weather, setWeather] = useState(\"waiting for server response...\");\n\n  const [weatherIcons, setWeatherIcons] = useState({\n    sun: \"none\",\n    cloud: \"none\",\n    lightRain: \"none\",\n    heavyRain: \"none\",\n    bolt: \"none\",\n    snow: \"none\",\n    mist: \"none\"\n  });\n\n  const [temperature, setTemperature] = useState(null);\n  const [feelsLike, setFeelsLike] = useState(null);\n  const [tempUnit, setTempUnit] = useState(\"C\");\n  //for button changing C/F\n  const [tempCelcius, setTempCelcius] = useState(null);\n  const [tempCelciusFeelsLike, setTempCelciusFeelsLike] = useState(null);\n  let tempFahrenheit = Math.round((temperature * 1.8 + 32) * 100) / 100;\n  let tempFahrenheitFeelsLike = Math.round((feelsLike * 1.8 + 32) * 100) / 100;\n\n  function changeTemperature() {\n    if (tempUnit === \"C\") {\n      setTemperature(tempFahrenheit);\n      setTempUnit(\"F\");\n      setFeelsLike(tempFahrenheitFeelsLike);\n    }\n\n    if (tempUnit === \"F\") {\n      setTemperature(tempCelcius);\n      setTempUnit(\"C\");\n      setFeelsLike(tempCelciusFeelsLike);\n    }\n  }\n\n  useEffect(() => {\n    new Promise(function(resolve, reject) {\n      //getting longitude and latitude from navigator.geolocation\n      getLocation();\n\n      function getLocation() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(showPosition);\n        } else {\n          console.log(\"Geolocation is not supported by this browser.\");\n        }\n      }\n\n      function showPosition(position) {\n        let resultObj = {};\n\n        resultObj.latitude = position.coords.latitude;\n        resultObj.longitude = position.coords.longitude;\n\n        resolve(resultObj);\n      }\n    })\n      .then(function(result) {\n        setLongitude(result.longitude);\n        setLatitude(result.latitude);\n\n        return `https://fcc-weather-api.glitch.me/api/current?lon=${result.longitude}&lat=${result.latitude}`;\n      })\n      //fetching data from freeCodeCamp API\n      .then(function(myURL) {\n        fetch(myURL)\n          .then(res => res.json())\n          .then(data => {\n            console.log(JSON.stringify(data, null, 2));\n            console.log(\"data name\");\n            console.log(data.name);\n            console.log(data.sys.country);\n            setRegion(data.name);\n            setCountry(data.sys.country);\n            setTemperature(data.main.temp);\n            setTempCelcius(data.main.temp);\n            setFeelsLike(data.main.feels_like);\n            setTempCelciusFeelsLike(data.main.feels_like);\n            setWeather(data.weather[0].main);\n\n            let weatherIconsObj = {\n              sun: \"none\",\n              cloud: \"none\",\n              lightRain: \"none\",\n              heavyRain: \"none\",\n              bolt: \"none\",\n              snow: \"none\",\n              mist: \"none\"\n            };\n            //display for particular icon will be switch from none to block\n            switch (data.weather[0].main) {\n              case \"Clear\":\n                weatherIconsObj.sun = \"block\";\n                break;\n              case \"Clouds\":\n                weatherIconsObj.cloud = \"block\";\n                break;\n              case \"Drizzle\":\n                weatherIconsObj.lightRain = \"block\";\n                break;\n              case \"Rain\":\n                weatherIconsObj.heavyRain = \"block\";\n                break;\n              case \"Thunderstorm\":\n                weatherIconsObj.bolt = \"block\";\n                break;\n              case \"Snow\":\n                weatherIconsObj.snow = \"block\";\n                break;\n              case \"Mist\":\n                weatherIconsObj.mist = \"block\";\n                break;\n              default:\n                console.log(\"no weather info\");\n            }\n\n            setWeatherIcons(weatherIconsObj);\n          });\n      });\n\n    //[] is passed to run useEffect only on first render\n  }, []);\n\n  return (\n    <div style={{ textAlign: \"center\" }} className=\"App\">\n      <header className=\"App-header\">\n        <h1>Local Weather App</h1>\n      </header>\n      <main>\n        <div className=\"align-on-hyphen\">\n          <p>\n            <span>latitude</span>: <span>{latitude}</span>\n          </p>\n          <p>\n            <span>longitude</span>: <span>{longitude}</span>\n          </p>\n          <p>\n            <span>region</span>: <span>{region}</span>\n          </p>\n          <p>\n            <span>country</span>: <span>{country}</span>\n          </p>\n          <p>\n            <span>temperature</span>:{\" \"}\n            <span>\n              {temperature} &#176;\n              <button className=\"btn-unit\" onClick={() => changeTemperature()}>\n                {tempUnit}\n              </button>\n            </span>\n          </p>\n          <p>\n            <span>feels like</span>:{\" \"}\n            <span>\n              {feelsLike} &#176;\n              <button className=\"btn-unit\" onClick={() => changeTemperature()}>\n                {tempUnit}\n              </button>\n            </span>\n          </p>\n          <p>\n            <span>weather</span>: <span>{weather}</span>\n          </p>\n        </div>\n        <div className=\"weather-icons\">\n          <FontAwesomeIcon\n            icon={faSun}\n            size=\"5x\"\n            className=\"weather-icon sun\"\n            style={{ display: `${weatherIcons.sun}` }}\n          />\n          <FontAwesomeIcon\n            icon={faCloud}\n            size=\"5x\"\n            className=\"weather-icon cloud\"\n            style={{ display: `${weatherIcons.cloud}` }}\n          />\n          <FontAwesomeIcon\n            icon={faCloudRain}\n            size=\"5x\"\n            className=\"weather-icon light-rain\"\n            style={{ display: `${weatherIcons.lightRain}` }}\n          />\n          <FontAwesomeIcon\n            icon={faCloudShowersHeavy}\n            size=\"5x\"\n            className=\"weather-icon heavy-rain\"\n            style={{ display: `${weatherIcons.heavyRain}` }}\n          />\n          <FontAwesomeIcon\n            icon={faBolt}\n            size=\"5x\"\n            className=\"weather-icon bolt\"\n            style={{ display: `${weatherIcons.bolt}` }}\n          />\n          <FontAwesomeIcon\n            icon={faSnowflake}\n            size=\"5x\"\n            className=\"weather-icon snow\"\n            style={{ display: `${weatherIcons.snow}` }}\n          />\n          <FontAwesomeIcon\n            icon={faSmog}\n            size=\"5x\"\n            className=\"weather-icon mist\"\n            style={{ display: `${weatherIcons.mist}` }}\n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}